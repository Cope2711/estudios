TITULO:
Patrones de Diseño Creacionales

TEMA:
Introducción

PARRAFO:
Los patrones de diseño son soluciones a problemas comunes que enfrentamos en el diseño y desarrollo de software. Estos patrones no son algoritmos ni soluciones específicas, sino más bien descripciones generales o plantillas de cómo abordar ciertos problemas. Dentro de estos patrones, los creacionales se centran en la creación de objetos. En este artículo, abordaremos brevemente los patrones de diseño creacionales y su relevancia en el desarrollo de software moderno.

TEMA:
Singleton

PARRAFO:
El patrón Singleton garantiza que una clase tenga una sola instancia y proporciona un punto de acceso global a esa instancia. Es útil cuando queremos evitar que un objeto se instancie múltiples veces.
Ejemplo: La configuración global de una aplicación, donde sería contraproducente tener múltiples configuraciones en diferentes partes del código.

TEMA:
Fábrica (Factory)

PARRAFO:
El patrón Factory se usa para crear objetos, pero la decisión de qué objeto crear se toma en tiempo de ejecución basándose en la entrada. Permite a una clase delegar la responsabilidad de instanciar sus objetos a sus subclases.
Ejemplo: Una interfaz de "Pago" puede tener diferentes implementaciones como "PagoTarjetaCredito" o "PagoPayPal", y se selecciona la implementación adecuada en tiempo de ejecución.

TEMA:
Abstract Factory

PARRAFO:
Este patrón proporciona una interfaz para crear familias de objetos relacionados o dependientes sin especificar sus clases concretas. Es como una fábrica de fábricas.
Ejemplo: Una fábrica de muebles puede tener diferentes implementaciones para diferentes estilos de muebles (moderno, vintage, minimalista), y cada estilo tiene diferentes productos relacionados (sillas, mesas, sofás).

TEMA:
Builder

PARRAFO:
El patrón Builder se utiliza para construir un objeto complejo paso a paso y el objeto final se obtiene al final. Separa la construcción de un objeto complejo de su representación.
Ejemplo: El proceso de preparar una pizza podría verse como un patrón Builder, donde elegimos el tipo de masa, ingredientes, tamaño y luego construimos la pizza final.

TEMA:
Prototipo (Prototype)

PARRAFO:
El patrón Prototype permite copiar objetos existentes sin hacer el sistema dependiente de sus clases. Los objetos se clonan o se duplican.
Ejemplo: Si tienes un objeto que es costoso de crear y ya tienes una instancia, puedes clonar ese objeto y modificarlo según tus necesidades en lugar de crear uno desde cero.


